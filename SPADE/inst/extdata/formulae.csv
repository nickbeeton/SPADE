,Model name,Model formula,Variables,Defaults,Discrete,Continuous
Demographic,theta-Ricker model,N(t+1) = N(t) * exp[r * (1 - N(t)/K)^theta],r theta,0.17 1.3,"tmp = with(parms$interactions[[i]][[i]], N * (exp(r[season] * (1 - (N/KN)^theta[season])) - 1))","tmp = with(parms$interactions[[i]][[i]], r[season] * (1 - exp( (log(N)-KN)*theta[season] )))\ntmp = N * with(parms$interactions[[i]][[i]], 3/2 * tmp - 1/2 * r[season] * (1 - exp((log(N) + tmp - KN) * theta[season])))"
Demographic,Constant births and deaths,dN/dt = (b-mu)*N,b mu,1 1,"tmp = with(parms$interactions[[i]][[i]],  N * b[season] - pop[i,] * mu[season])","tmp = with(parms$interactions[[i]][[i]],  N * b[season] - pop[i,] * mu[season])"
Demographic,Logistic births,dX/dt = b*N*(1 - N/K) - mu*X,b mu,1 1,"tmp = with(parms$interactions[[i]][[i]], b[season] * N * (1 - (1 -  mean(mu)/mean(b)) * N/KN) - pop[i,] * mu[season])","tmp = with(parms$interactions[[i]][[i]], b[season] * N * (1 - (1 -  mean(mu)/mean(b)) * N/KN) - pop[i,] * mu[season])"
Demographic,Logistic births (single species birth only),dX/dt = b*X*(X/N)*(1 - N/K(N)) - mu*X,b mu,1 1,"tmp = with(parms$interactions[[i]][[i]], b[season] * pop[i,] * (pop[i,]/(N+1e-6)) * (1 - (1 -  mu[season]/b[season]) *N/KN) - pop[i,] * mu[season])","tmp = with(parms$interactions[[i]][[i]], b[season] * pop[i,] * (pop[i,]/(N+1e-6)) * (1 - (1 -  mu[season]/b[season]) *N/KN) - pop[i,] * mu[season])"
Demographic,Logistic deaths,dN/dt = -mu*X*(1 + c*X),b mu c,1 1 1,"tmp = with(parms$interactions[[i]][[i]], (b[season] -mu[season] * (1 + c[season] * pop[i,]/KN))*pop[i,])","tmp = with(parms$interactions[[i]][[i]], (b[season] -mu[season] * (1 + c[season] * pop[i,]/KN))*pop[i,])"
Disease,Direct conversion,f(I) = beta*S,beta,1,"tmp = with(parms$interactions[[i]][[j]], beta[season] * pop[from,])","tmp = with(parms$interactions[[i]][[j]], beta[season] * pop[from,])"
Disease,Density dependent,"f(S,I) = beta*S*I (eps = 0)",beta,1,"tmp = with(parms$interactions[[i]][[j]], beta[season] * pop[from,] * pop[via,])","tmp = with(parms$interactions[[i]][[j]], beta[season] * pop[from,] * pop[via,])"
Disease,Frequency dependent,"f(S,I) = beta*S*I/N (eps = 1)",beta,1,"tmp = with(parms$interactions[[i]][[j]], beta[season] * pop[from,] * pop[via,] / N)","tmp = with(parms$interactions[[i]][[j]], beta[season] * pop[from,] * pop[via,] / N)"
Disease,Power relationship,"f(S,I) = beta*S^p*I^q",beta p q,1 1 1,"tmp = with(parms$interactions[[i]][[j]], beta[season] * pop[from,]^p[season] * pop[via,]^q[season]  / (1 - eps[season] + eps[season]*N))","tmp = with(parms$interactions[[i]][[j]], beta[season] * pop[from,]^p[season] * pop[via,]^q[season]  / (1 - eps[season] + eps[season]*N))"
Disease,Refuge effect,"f(S,I) = beta*I*(N - I/q)",beta q,1 1,"tmp = with(parms$interactions[[i]][[j]], beta[season] * pop[via,] * (N - pop[via,]/q[season])  / (1 - eps[season] + eps[season]*N))","tmp = with(parms$interactions[[i]][[j]], beta[season] * pop[via,] * (N - pop[via,]/q[season])  / (1 - eps[season] + eps[season]*N))"
Disease,Negative binomial,"f(S,I) = k*S*ln(1 + beta*I/k)",beta k,1 1,"tmp = with(parms$interactions[[i]][[j]], k[season] * pop[from,] * log(1 + beta[season] * pop[via,] / k[season])  / (1 - eps[season] + eps[season]*N))","tmp = with(parms$interactions[[i]][[j]], k[season] * pop[from,] * log(1 + beta[season] * pop[via,] / k[season])  / (1 - eps[season] + eps[season]*N))"
Disease,Asymptotic transmission,"f(S,I) = beta * S * I / (c + S + I)",beta c,1 1,"tmp = with(parms$interactions[[i]][[j]], beta[season] * pop[from,] * pop[via,] / (c + pop[from,] + pop[via,]))","tmp = with(parms$interactions[[i]][[j]], beta[season] * pop[from,] * pop[via,] / (c + pop[from,] + pop[via,]))"
Predator-prey,Hollings Type I,f(R) = a*R,a,1,"tmp = with(parms$interactions[[i]][[j]], a[season] * pop[j,] * pop[i,])","tmp = with(parms$interactions[[i]][[j]], a[season] * pop[j,] * pop[i,])"
Predator-prey,Hollings Type II,f(R) = a*R / (1 + a*h*R),a h,1 1,"tmp = with(parms$interactions[[i]][[j]], a[season] * pop[j,] * pop[i,] / (1 + a[season] * h[season] * pop[j,]))","tmp = with(parms$interactions[[i]][[j]], a[season] * pop[j,] * pop[i,] / (1 + a[season] * h[season] * pop[j,]))"
Predator-prey,Hollings Type III,f(R) = a*R^gamma / (1 + a*h*R^gamma),a h gamma,1 1 1,"tmp = with(parms$interactions[[i]][[j]], a[season] * pop[j,] * pop[i,] / (1 + a[season] * h[season] * pop[j,]^gamma[season]))","tmp = with(parms$interactions[[i]][[j]], a[season] * pop[j,] * pop[i,] / (1 + a[season] * h[season] * pop[j,]^gamma[season]))"
Predator-prey,Test,f( R ) = a * R^b,a b,1 2,"tmp = with(parms$interactions[[i]][[j]], a[season] * pop[j,] ^ b[season])","tmp = with(parms$interactions[[i]][[j]], a[season] * pop[j,] ^ b[season])"
Diffusion,Korobenko et al. (2013),D*diff(N/K),D,0.5,"prop = (pop[i,] / KN); migration = with(parms$interactions[[i]][[i]], D[season] * EL[locs] * lapmat %*% prop)","prop = (pop[i,] / KN); migration = with(parms$interactions[[i]][[i]], D[season] * EL[locs] * lapmat %*% prop)"
Diffusion,McMahon et al. (2010),((disp.max + disp.min)/2 + (disp.max - disp.min)*(N - 0.55K) / (0.9 K))*diff(N),disp.max disp.min,0.5 0.5,"disp.av = with(parms$interactions[[i]][[i]], 0.5*(disp.max[season] + disp.min[season])); disp.range = with(parms$interactions[[i]][[i]], disp.max[season] - disp.min[season]); P = disp.av + disp.range / (0.9 * KN) * (pop[i,] - 0.55 * KN); migration = P * EL[locs] * lapmat %*% pop[i,]","disp.av = with(parms$interactions[[i]][[i]], 0.5*(disp.max[season] + disp.min[season])); disp.range = with(parms$interactions[[i]][[i]], disp.max[season] - disp.min[season]); P = disp.av + disp.range / (0.9 * KN) * (pop[i,] - 0.55 * KN); migration = P * EL[locs] * lapmat %*% pop[i,]"
Diffusion,Advection-diffusion (e.g. Cartrell et al),div(D*grad(N) - D*N/K * grad(K)),D,0.5,"migration = with(parms$interactions[[i]][[i]], D[season] * EL[locs] * lapmat %*% (pop[i,]) + gradmat.x%*%(D[season] * EL[locs])*gradmat.x%*%pop[i,] + gradmat.y%*%(D[season] * EL[locs])*gradmat.y%*%pop[i,] - (D[season] * pop[i,] / KN) * lapmat %*% KN - gradmat.x%*%(D[season] * pop[i,] / KN)*gradmat.x%*%KN - gradmat.y%*%(D[season] * pop[i,] / KN)*gradmat.y%*%KN)","migration = with(parms$interactions[[i]][[i]], D[season] * EL[locs] * lapmat %*% (pop[i,]) + gradmat.x%*%(D[season] * EL[locs])*gradmat.x%*%pop[i,] + gradmat.y%*%(D[season] * EL[locs])*gradmat.y%*%pop[i,] - (D[season] * pop[i,] / KN) * lapmat %*% KN - gradmat.x%*%(D[season] * pop[i,] / KN)*gradmat.x%*%KN - gradmat.y%*%(D[season] * pop[i,] / KN)*gradmat.y%*%KN)"
